(window.webpackJsonp=window.webpackJsonp||[]).push([[59],{644:function(e,t,n){"use strict";n.r(t);var s=n(42),a=Object(s.a)({},(function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[n("p",[e._v("Add stroage account for terrastate")]),e._v(" "),n("div",{staticClass:"language-shell extra-class"},[n("pre",{pre:!0,attrs:{class:"language-shell"}},[n("code",[e._v("az group create --name adc-tfstate-rg --location westeurope\n\naz storage account create -n tfstateadadc -g adc-tfstate-rg --sku Standard_LRS\n\naz storage container create -n tfstate --account-name tfstateadadc --account-key "),n("span",{pre:!0,attrs:{class:"token variable"}},[n("span",{pre:!0,attrs:{class:"token variable"}},[e._v("`")]),e._v("az storage account keys list -n tfstateadadc -g adc-tfstate-rg --query "),n("span",{pre:!0,attrs:{class:"token string"}},[e._v('"[0].value"')]),e._v(" -otsv"),n("span",{pre:!0,attrs:{class:"token variable"}},[e._v("`")])]),e._v("\n")])])]),n("p",[e._v("Kubernetes")]),e._v(" "),n("p",[e._v("k create ns dev")]),e._v(" "),n("p",[e._v("Ingress:")]),e._v(" "),n("p",[e._v("k create ns ingress")]),e._v(" "),n("p",[e._v("helm repo add stable https://kubernetes-charts.storage.googleapis.com/\nhelm install clstr-ingress stable/nginx-ingress --set rbac.create=true,controller.service.externalTrafficPolicy=Local --namespace ingress")]),e._v(" "),n("p",[e._v("Secret / Docker Reg")]),e._v(" "),n("p",[e._v("Dashboard")]),e._v(" "),n("p",[e._v("https://github.com/vmware-tanzu/octant/releases")]),e._v(" "),n("p",[e._v("Certmanager")]),e._v(" "),n("p",[e._v("kubectl create namespace cert-manager")]),e._v(" "),n("p",[e._v("helm repo add jetstack https://charts.jetstack.io")]),e._v(" "),n("p",[e._v("helm install cert-manager "),n("br"),e._v("\n--namespace cert-manager "),n("br"),e._v("\n--version v0.15.0 "),n("br"),e._v("\njetstack/cert-manager "),n("br"),e._v("\n--set installCRDs=true "),n("br"),e._v("\n--set ingressShim.defaultIssuerName=letsencrypt-prod "),n("br"),e._v("\n--set ingressShim.defaultIssuerKind=ClusterIssuer "),n("br"),e._v("\n--set ingressShim.defaultIssuerGroup=cert-manager.io")]),e._v(" "),n("p",[e._v("apiVersion: cert-manager.io/v1alpha2\nkind: ClusterIssuer\nmetadata:\nname: letsencrypt-staging\nspec:\nacme:\n# The ACME server URL\nserver: https://acme-staging-v02.api.letsencrypt.org/directory\n# Email address used for ACME registration\nemail: chritian.dennig@microsoft.com\n# Name of a secret used to store the ACME account private key\nprivateKeySecretRef:\nname: letsencrypt-staging\n# Enable the HTTP-01 challenge provider\nsolvers:\n- http01:\ningress:\nclass:  nginx")]),e._v(" "),n("hr"),e._v(" "),n("p",[e._v("apiVersion: cert-manager.io/v1alpha2\nkind: ClusterIssuer\nmetadata:\nname: letsencrypt-prod\nspec:\nacme:\n# The ACME server URL\nserver: https://acme-v02.api.letsencrypt.org/directory\n# Email address used for ACME registration\nemail: christian.dennig@microsoft.com\n# Name of a secret used to store the ACME account private key\nprivateKeySecretRef:\nname: letsencrypt-prod\n# Enable the HTTP-01 challenge provider\nsolvers:\n- http01:\ningress:\nclass: nginx")]),e._v(" "),n("hr"),e._v(" "),n("p",[e._v('apiVersion: extensions/v1beta1\nkind: Ingress\nmetadata:\nname: ing-contacts\nannotations:\nkubernetes.io/ingress.class: "nginx"\nnginx.ingress.kubernetes.io/enable-cors: "true"\nnginx.ingress.kubernetes.io/cors-allow-headers: "Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Authorization,Accept-Language"\nnginx.ingress.kubernetes.io/cors-max-age: "600"\nnginx.ingress.kubernetes.io/proxy-body-size: "12m"\nnginx.ingress.kubernetes.io/rewrite-target: "/contacts/$2"\nnginx.ingress.kubernetes.io/ssl-redirect: "true"\ncert-manager.io/cluster-issuer: letsencrypt-prod\nspec:\ntls:\n- hosts:\n- 52-232-4-29.nip.io\nsecretName: tls-secret\nrules:')]),e._v(" "),n("ul",[n("li",[e._v("host: 52-232-4-29.nip.io\nhttp:\npaths:\n"),n("ul",[n("li",[e._v("path: /api/contacts(/|$)(.*)\nbackend:\nserviceName: contacts\nservicePort: 8080")])])])]),e._v(" "),n("p",[e._v("DevOps:")]),e._v(" "),n("p",[e._v("Replace Tokens\nTerraform Task")]),e._v(" "),n("p",[e._v("Replace Variable for Terraform state / container")])])}),[],!1,null,null,null);t.default=a.exports}}]);